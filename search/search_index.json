{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-\\.]"},"docs":[{"location":"","text":"Blockthon Installation | Example | Donate | Contact installation Blockthon Python Package for Generate and Converting Wallet Private Key and Mnemonic for Address Bitcoin # on windows pip install Blockthon # on Linux pip3 install Blockthon or for download manual: git clone https://github.com/Blockthon/Blockthon cd Blockthon make Private Key generated random private key without repeat : from Blockthon import Wallet Privatekey = Wallet.getPrivateKey() Mnemonic Generated random mnemonic with standard size : from Blockthon import Wallet # default size 12 . can use [12, 18, 24] mnemonicString = Wallet.getMnemonic(size=12) Bytes (seed) Generated Random Bytes Without Repeat : from Blockthon import Wallet byte = Wallet.getBytes() Binary Generate Random Binary Without repeat 0/1 : from Blockthon import Wallet binary_string = Wallet.getBin(256) Private Key To Bytes from Blockthon import Wallet privatekey = Wallet.getPrivateKey() # Convert Private Key HEX To Bytes SEED byte = Wallet.PrivateKey_To_Bytes(privatekey) Private Key To Wif generated private key (hex) and convert to wif compressed and uncompressed. from Blockthon import Wallet privatekey = Wallet.getPrivateKey() # Convert Private key Hex To Wif # wif compressed wif_compress = Wallet.PrivateKey_To_Wif(privatekey, compress=True) # wif Uncompressed wif_uncompress = Wallet.PrivateKey_To_Wif(privatekey, compress=False) Private Key To Mnemonic from Blockthon import Wallet privatekey = Wallet.getPrivateKey() # convert private key [hex] To mnemonic mnemonic_string = Wallet.PrivateKey_To_Mnemonics(privatekey, size=12) # for size mnemonic can use [12, 18, 24] Private Key To Binary from Blockthon import Wallet privatekey = Wallet.getPrivateKey() # convert hex to bin binary_string = Wallet.PrivateKey_To_Binary(privatekey) Private Key To Decimal (int) from Blockthon import Wallet privatekey = Wallet.getPrivateKey() # convert private key hex to number (dec) dec = Wallet.PrivateKey_To_Dec(privatekey) Private Key To RIPEMD160 from Blockthon import Wallet privatekey = Wallet.getPrivateKey() # convert private key to ripemd160 (hash160) ripemd160 = Wallet.PrivateKey_To_RIPEMD160(privatekey) Private Key To Address convert private key Hex to Compress and Uncompress Address from Blockthon import Wallet privatekey = Wallet.getPrivateKey() # convert private key to compress address compress_Address = Wallet.PrivateKey_To_Address(privatekey, compress=True) # convert to uncompress address uncompress_Address = Wallet.PrivateKey_To_Address(privatekey, compress=False) Private Key To Public Key generated private key and convert to public key compress and uncompress: from Blockthon import Wallet privatekey = Wallet.getPrivateKey() # convert to public key uncompress public_uncompress = Wallet.PrivateKey_To_PublicKey(privatekey) # convert private key hex to public key compress public_compress = Wallet.PrivateKey_To_PublicKey(privatekey, compress=True) Bytes To Private Key from Blockthon import Wallet byte = Wallet.getBytes() # convert bytes to hex (private key) privatekey = Wallet.Bytes_To_PrivateKey(byte) Bytes To mnemonic convert bytes to mnemonic with default size=12 can use standard sizr: 12, 18, 24 from Blockthon import Wallet byte = Wallet.getBytes() # Convert bytes to mnemonic with default size 12 mnemonic_words = Wallet.Bytes_To_Mnemonic(byte, 12) Bytes To Wif convert bytes To wif Compress and uncompress: from Blockthon import Wallet byte = Wallet.getBytes() # compress wif wif_compress = Wallet.Bytes_To_Wif(byte, compress=True) #uncompress Wif wif_uncompress = Wallet.Bytes_To_Wif(byte, compress=False) Bytes To Public Key convert bytes to public key compress and uncompress from Blockthon import Wallet byte = Wallet.getBytes() # compress Publickey Pub_compress = Wallet.Bytes_To_PublicKey(byte, compress=True) #uncompress Wif Pub_uncompress = Wallet.Bytes_To_PublicKey(byte, compress=False) Bytes to Dec (number) convert bytes to decimal number from Blockthon import Wallet byte = Wallet.getBytes() #convert to integer dec = Wallet.Bytes_To_Dec(byte) Wif To Public Key convert wif to public key compress and uncompress from Blockthon import Wallet wif = \"WIF_STRING_HERE\" pub_compress = Wallet.Wif_To_PublicKey(wif, compress=True) pub_uncompress = Wallet.Wif_To_PublicKey(wif) Wif To Mnemonic convert Wif To Mnemonic With Default size=12 , Can use Standard Size 12, 18, 24 from Blockthon import Wallet wif = \"WIF_STRING_HERE\" mnemonic_string = Wallet.Wif_To_Mnemonic(wif, 12) Wif To RIPEMD160 convert wif to RIPEMD160 return hex string from Blockthon import Wallet wif = \"WIF_STRING_HERE\" RIPEMD160 = Wallet.Wif_To_RIPEMD160(wif) Mnemonic To Root Key (XPRV) from Blockthon import Wallet mnemonic_string = Wallet.getMnemonic(12) xprv = Wallet.Mnemonic_To_RootKey(mnemonic_string) Mnemonic To Private key from Blockthon import Wallet mnemonic_string = Wallet.getMnemonic(12) pivatekey = Wallet.Mnemonic_To_PrivateKey() Mnemonic To Address convert mnemonic to compressed and uncompressed Address from Blockthon import Wallet mnemonic_string = Wallet.getMnemonic(12) # compress Address compress_Address = Wallet.Mnemonic_To_Address(mnemonic_string, True) # uncompress Address uncompress_Address = Wallet.Mnemonic_To_Address(mnemonic_stringm False) Passphrase To Private Key convert word passphrase to private key (hex) from Blockthon import Wallet passphrase = 'Mmdrza.Com' privatekey = Wallet.Passphrase_To_PrivateKey(passphrase) Passphrase to Wif from Blockthon import Wallet passphrase = 'Mmdrza.Com' wif = Wallet.Passphrase_To_Wif(passphrase) Example: from Blockthon import Wallet, Ethereum, Tron, Dogecoin, Bitcoin, Litecoin, Dash, Digibyte, BitcoinGold, Ravencoin, Qtum, zCash seed = Wallet.getSeed() privatekey = Wallet.Bytes_To_PrivateKey(seed) mnemonics = Wallet.Bytes_To_Mnemonic(seed, 12) wif_compress = Wallet.Bytes_To_Wif(seed, compress=True) wif_uncompress = Wallet.Bytes_To_Wif(seed, compress=False) dec = Wallet.Bytes_To_Dec(seed) xprv = Wallet.Mnemonic_To_RootKey(mnemonics) publickey = Wallet.Bytes_To_PublicKey(seed) ripemd160 = Wallet.Bytes_To_RIPEMD160(seed) compressAddress = Wallet.Bytes_To_Address(seed, compress=True) uncompressAddress = Wallet.Bytes_To_Address(seed, compress=False) p2pkhAddress = Bitcoin.Address_From_PrivateKey(privatekey, Type='P2PKH') p2shAddress = Bitcoin.Address_From_PrivateKey(privatekey, Type='P2SH') p2wpkhAddress = Bitcoin.Address_From_PrivateKey(privatekey, Type='P2WPKH') p2wshAddress = Bitcoin.Address_From_PrivateKey(privatekey, Type='P2WSH') p2wpkhSegwit = Bitcoin.Address_From_PrivateKey(privatekey, Type='P2WPKHinP2SH') p2wshSegwit = Bitcoin.Address_From_PrivateKey(privatekey, Type='P2WSHinP2SH') p2pkh_ltc = Litecoin.Address_From_PrivateKey(privatekey, 'P2PKH') p2sh_ltc = Litecoin.Address_From_PrivateKey(privatekey, 'P2SH') p2wpkh_ltc = Litecoin.Address_From_PrivateKey(privatekey, 'P2WPKH') p2wsh_ltc = Litecoin.Address_From_PrivateKey(privatekey, 'P2WSH') ethereumAddress = Ethereum.Address_From_PrivateKey(privatekey) tronAddress = Tron.Address_From_PrivateKey(privatekey) dogeAddress = Dogecoin.Address_From_PrivateKey(privatekey) dashAddress = Dash.Address_From_PrivateKey(privatekey) digibyteAddress = Digibyte.Address_From_PrivateKey(privatekey) RVNAddress = Ravencoin.Address_From_PrivateKey(privatekey) QtumAddress = Qtum.Address_From_PrivateKey(privatekey) zcashAddress = zCash.Address_From_PrivateKey(privatekey) print(f\"\"\" Seed : {seed} PrivateKey [Hex]: {privatekey} Mnemonic: {mnemonics} Wif Compressed: {wif_compress} Wif UnCompressed: {wif_uncompress} Decimal: {dec} RIPEMD160: {ripemd160} {'-' * 22} Address's {'-' * 22} Compressed Address: {compressAddress} UnCompressed Address: {uncompressAddress} Bitcoin P2PKH: {p2pkhAddress} Bitcoin P2SH: {p2shAddress} Bitcoin P2WPKH: {p2wpkhAddress} Bitcoin P2WSH: {p2wshAddress} Bitcoin P2WPKH in Segwit: {p2wpkhSegwit} Bitcoin P2WSH in Segwit: {p2wshSegwit} Litecoin P2PKH: {p2pkh_ltc} Litecoin P2SH: {p2sh_ltc} Litecoin P2WSH: {p2wsh_ltc} Litecoin P2WPKH: {p2wpkh_ltc} Ethereum: {ethereumAddress} Tron: {tronAddress} Dogecoin: {dogeAddress} DASH: {dashAddress} DigiByte: {digibyteAddress} Ravencoin: {RVNAddress} QTUM: {QtumAddress} zCASH: {zcashAddress} \"\"\") Bitcoin Wallet Ethereum Wallet Litecoin Wallet Tron Wallet BitcoinGold Wallet Dogecoin Wallet dash Wallet digibyte Wallet Qtum Wallet Ravencoin wallet zcash Wallet contact Programmer & Owner : Mmdrza.Com Email : PyMmdrza@Gmail.Com Github: Blockthon/Blockthon Document: Blockthon Donate: Bitcoin (BTC): 1MMDRZA19y8RmmEEqjv6w7tLFDK2uHh5qD Ethereum & USDT (ERC20): 0x348e3C3b17784AafD7dB67d011b85F838F16E2D1 USDT & TRON (TRC20): TR4mA5quGVHGYS186HKDuArbD8SVssiZVx Litecoin (LTC): ltc1qtgvxc6na9pxvznu05yys3j5rq9ej6kahe2j50v","title":"Home"},{"location":"#blockthon","text":"Installation | Example | Donate | Contact","title":"Blockthon"},{"location":"#installation","text":"Blockthon Python Package for Generate and Converting Wallet Private Key and Mnemonic for Address Bitcoin # on windows pip install Blockthon # on Linux pip3 install Blockthon or for download manual: git clone https://github.com/Blockthon/Blockthon cd Blockthon make","title":"installation"},{"location":"#private-key","text":"generated random private key without repeat : from Blockthon import Wallet Privatekey = Wallet.getPrivateKey()","title":"Private Key"},{"location":"#mnemonic","text":"Generated random mnemonic with standard size : from Blockthon import Wallet # default size 12 . can use [12, 18, 24] mnemonicString = Wallet.getMnemonic(size=12)","title":"Mnemonic"},{"location":"#bytes-seed","text":"Generated Random Bytes Without Repeat : from Blockthon import Wallet byte = Wallet.getBytes()","title":"Bytes (seed)"},{"location":"#binary","text":"Generate Random Binary Without repeat 0/1 : from Blockthon import Wallet binary_string = Wallet.getBin(256)","title":"Binary"},{"location":"#private-key-to-bytes","text":"from Blockthon import Wallet privatekey = Wallet.getPrivateKey() # Convert Private Key HEX To Bytes SEED byte = Wallet.PrivateKey_To_Bytes(privatekey)","title":"Private Key To Bytes"},{"location":"#private-key-to-wif","text":"generated private key (hex) and convert to wif compressed and uncompressed. from Blockthon import Wallet privatekey = Wallet.getPrivateKey() # Convert Private key Hex To Wif # wif compressed wif_compress = Wallet.PrivateKey_To_Wif(privatekey, compress=True) # wif Uncompressed wif_uncompress = Wallet.PrivateKey_To_Wif(privatekey, compress=False)","title":"Private Key To Wif"},{"location":"#private-key-to-mnemonic","text":"from Blockthon import Wallet privatekey = Wallet.getPrivateKey() # convert private key [hex] To mnemonic mnemonic_string = Wallet.PrivateKey_To_Mnemonics(privatekey, size=12) # for size mnemonic can use [12, 18, 24]","title":"Private Key To Mnemonic"},{"location":"#private-key-to-binary","text":"from Blockthon import Wallet privatekey = Wallet.getPrivateKey() # convert hex to bin binary_string = Wallet.PrivateKey_To_Binary(privatekey)","title":"Private Key To Binary"},{"location":"#private-key-to-decimal-int","text":"from Blockthon import Wallet privatekey = Wallet.getPrivateKey() # convert private key hex to number (dec) dec = Wallet.PrivateKey_To_Dec(privatekey)","title":"Private Key To Decimal (int)"},{"location":"#private-key-to-ripemd160","text":"from Blockthon import Wallet privatekey = Wallet.getPrivateKey() # convert private key to ripemd160 (hash160) ripemd160 = Wallet.PrivateKey_To_RIPEMD160(privatekey)","title":"Private Key To RIPEMD160"},{"location":"#private-key-to-address","text":"convert private key Hex to Compress and Uncompress Address from Blockthon import Wallet privatekey = Wallet.getPrivateKey() # convert private key to compress address compress_Address = Wallet.PrivateKey_To_Address(privatekey, compress=True) # convert to uncompress address uncompress_Address = Wallet.PrivateKey_To_Address(privatekey, compress=False)","title":"Private Key To Address"},{"location":"#private-key-to-public-key","text":"generated private key and convert to public key compress and uncompress: from Blockthon import Wallet privatekey = Wallet.getPrivateKey() # convert to public key uncompress public_uncompress = Wallet.PrivateKey_To_PublicKey(privatekey) # convert private key hex to public key compress public_compress = Wallet.PrivateKey_To_PublicKey(privatekey, compress=True)","title":"Private Key To Public Key"},{"location":"#bytes-to-private-key","text":"from Blockthon import Wallet byte = Wallet.getBytes() # convert bytes to hex (private key) privatekey = Wallet.Bytes_To_PrivateKey(byte)","title":"Bytes To Private Key"},{"location":"#bytes-to-mnemonic","text":"convert bytes to mnemonic with default size=12 can use standard sizr: 12, 18, 24 from Blockthon import Wallet byte = Wallet.getBytes() # Convert bytes to mnemonic with default size 12 mnemonic_words = Wallet.Bytes_To_Mnemonic(byte, 12)","title":"Bytes To mnemonic"},{"location":"#bytes-to-wif","text":"convert bytes To wif Compress and uncompress: from Blockthon import Wallet byte = Wallet.getBytes() # compress wif wif_compress = Wallet.Bytes_To_Wif(byte, compress=True) #uncompress Wif wif_uncompress = Wallet.Bytes_To_Wif(byte, compress=False)","title":"Bytes To Wif"},{"location":"#bytes-to-public-key","text":"convert bytes to public key compress and uncompress from Blockthon import Wallet byte = Wallet.getBytes() # compress Publickey Pub_compress = Wallet.Bytes_To_PublicKey(byte, compress=True) #uncompress Wif Pub_uncompress = Wallet.Bytes_To_PublicKey(byte, compress=False)","title":"Bytes To Public Key"},{"location":"#bytes-to-dec-number","text":"convert bytes to decimal number from Blockthon import Wallet byte = Wallet.getBytes() #convert to integer dec = Wallet.Bytes_To_Dec(byte)","title":"Bytes to Dec (number)"},{"location":"#wif-to-public-key","text":"convert wif to public key compress and uncompress from Blockthon import Wallet wif = \"WIF_STRING_HERE\" pub_compress = Wallet.Wif_To_PublicKey(wif, compress=True) pub_uncompress = Wallet.Wif_To_PublicKey(wif)","title":"Wif To Public Key"},{"location":"#wif-to-mnemonic","text":"convert Wif To Mnemonic With Default size=12 , Can use Standard Size 12, 18, 24 from Blockthon import Wallet wif = \"WIF_STRING_HERE\" mnemonic_string = Wallet.Wif_To_Mnemonic(wif, 12)","title":"Wif To Mnemonic"},{"location":"#wif-to-ripemd160","text":"convert wif to RIPEMD160 return hex string from Blockthon import Wallet wif = \"WIF_STRING_HERE\" RIPEMD160 = Wallet.Wif_To_RIPEMD160(wif)","title":"Wif To RIPEMD160"},{"location":"#mnemonic-to-root-key-xprv","text":"from Blockthon import Wallet mnemonic_string = Wallet.getMnemonic(12) xprv = Wallet.Mnemonic_To_RootKey(mnemonic_string)","title":"Mnemonic To Root Key (XPRV)"},{"location":"#mnemonic-to-private-key","text":"from Blockthon import Wallet mnemonic_string = Wallet.getMnemonic(12) pivatekey = Wallet.Mnemonic_To_PrivateKey()","title":"Mnemonic To Private key"},{"location":"#mnemonic-to-address","text":"convert mnemonic to compressed and uncompressed Address from Blockthon import Wallet mnemonic_string = Wallet.getMnemonic(12) # compress Address compress_Address = Wallet.Mnemonic_To_Address(mnemonic_string, True) # uncompress Address uncompress_Address = Wallet.Mnemonic_To_Address(mnemonic_stringm False)","title":"Mnemonic To Address"},{"location":"#passphrase-to-private-key","text":"convert word passphrase to private key (hex) from Blockthon import Wallet passphrase = 'Mmdrza.Com' privatekey = Wallet.Passphrase_To_PrivateKey(passphrase)","title":"Passphrase To Private Key"},{"location":"#passphrase-to-wif","text":"from Blockthon import Wallet passphrase = 'Mmdrza.Com' wif = Wallet.Passphrase_To_Wif(passphrase)","title":"Passphrase to Wif"},{"location":"#example","text":"from Blockthon import Wallet, Ethereum, Tron, Dogecoin, Bitcoin, Litecoin, Dash, Digibyte, BitcoinGold, Ravencoin, Qtum, zCash seed = Wallet.getSeed() privatekey = Wallet.Bytes_To_PrivateKey(seed) mnemonics = Wallet.Bytes_To_Mnemonic(seed, 12) wif_compress = Wallet.Bytes_To_Wif(seed, compress=True) wif_uncompress = Wallet.Bytes_To_Wif(seed, compress=False) dec = Wallet.Bytes_To_Dec(seed) xprv = Wallet.Mnemonic_To_RootKey(mnemonics) publickey = Wallet.Bytes_To_PublicKey(seed) ripemd160 = Wallet.Bytes_To_RIPEMD160(seed) compressAddress = Wallet.Bytes_To_Address(seed, compress=True) uncompressAddress = Wallet.Bytes_To_Address(seed, compress=False) p2pkhAddress = Bitcoin.Address_From_PrivateKey(privatekey, Type='P2PKH') p2shAddress = Bitcoin.Address_From_PrivateKey(privatekey, Type='P2SH') p2wpkhAddress = Bitcoin.Address_From_PrivateKey(privatekey, Type='P2WPKH') p2wshAddress = Bitcoin.Address_From_PrivateKey(privatekey, Type='P2WSH') p2wpkhSegwit = Bitcoin.Address_From_PrivateKey(privatekey, Type='P2WPKHinP2SH') p2wshSegwit = Bitcoin.Address_From_PrivateKey(privatekey, Type='P2WSHinP2SH') p2pkh_ltc = Litecoin.Address_From_PrivateKey(privatekey, 'P2PKH') p2sh_ltc = Litecoin.Address_From_PrivateKey(privatekey, 'P2SH') p2wpkh_ltc = Litecoin.Address_From_PrivateKey(privatekey, 'P2WPKH') p2wsh_ltc = Litecoin.Address_From_PrivateKey(privatekey, 'P2WSH') ethereumAddress = Ethereum.Address_From_PrivateKey(privatekey) tronAddress = Tron.Address_From_PrivateKey(privatekey) dogeAddress = Dogecoin.Address_From_PrivateKey(privatekey) dashAddress = Dash.Address_From_PrivateKey(privatekey) digibyteAddress = Digibyte.Address_From_PrivateKey(privatekey) RVNAddress = Ravencoin.Address_From_PrivateKey(privatekey) QtumAddress = Qtum.Address_From_PrivateKey(privatekey) zcashAddress = zCash.Address_From_PrivateKey(privatekey) print(f\"\"\" Seed : {seed} PrivateKey [Hex]: {privatekey} Mnemonic: {mnemonics} Wif Compressed: {wif_compress} Wif UnCompressed: {wif_uncompress} Decimal: {dec} RIPEMD160: {ripemd160} {'-' * 22} Address's {'-' * 22} Compressed Address: {compressAddress} UnCompressed Address: {uncompressAddress} Bitcoin P2PKH: {p2pkhAddress} Bitcoin P2SH: {p2shAddress} Bitcoin P2WPKH: {p2wpkhAddress} Bitcoin P2WSH: {p2wshAddress} Bitcoin P2WPKH in Segwit: {p2wpkhSegwit} Bitcoin P2WSH in Segwit: {p2wshSegwit} Litecoin P2PKH: {p2pkh_ltc} Litecoin P2SH: {p2sh_ltc} Litecoin P2WSH: {p2wsh_ltc} Litecoin P2WPKH: {p2wpkh_ltc} Ethereum: {ethereumAddress} Tron: {tronAddress} Dogecoin: {dogeAddress} DASH: {dashAddress} DigiByte: {digibyteAddress} Ravencoin: {RVNAddress} QTUM: {QtumAddress} zCASH: {zcashAddress} \"\"\")","title":"Example:"},{"location":"#bitcoin-wallet","text":"","title":"Bitcoin Wallet"},{"location":"#ethereum-wallet","text":"","title":"Ethereum Wallet"},{"location":"#litecoin-wallet","text":"","title":"Litecoin Wallet"},{"location":"#tron-wallet","text":"","title":"Tron Wallet"},{"location":"#bitcoingold-wallet","text":"","title":"BitcoinGold Wallet"},{"location":"#dogecoin-wallet","text":"","title":"Dogecoin Wallet"},{"location":"#dash-wallet","text":"","title":"dash Wallet"},{"location":"#digibyte-wallet","text":"","title":"digibyte Wallet"},{"location":"#qtum-wallet","text":"","title":"Qtum Wallet"},{"location":"#ravencoin-wallet","text":"","title":"Ravencoin wallet"},{"location":"#zcash-wallet","text":"","title":"zcash Wallet"},{"location":"#contact","text":"Programmer & Owner : Mmdrza.Com Email : PyMmdrza@Gmail.Com Github: Blockthon/Blockthon Document: Blockthon","title":"contact"},{"location":"#donate","text":"Bitcoin (BTC): 1MMDRZA19y8RmmEEqjv6w7tLFDK2uHh5qD Ethereum & USDT (ERC20): 0x348e3C3b17784AafD7dB67d011b85F838F16E2D1 USDT & TRON (TRC20): TR4mA5quGVHGYS186HKDuArbD8SVssiZVx Litecoin (LTC): ltc1qtgvxc6na9pxvznu05yys3j5rq9ej6kahe2j50v","title":"Donate:"},{"location":"BitcoinGold_Wallet/","text":"BitcoinGold With Blockthon Generated and Convert Private Key (HEX) To BitcoinGold Address from Blockthon.BitcoinGold import PrivateKey_To_BTG import os # Generate Random Private Key key = os.urandom(32).hex() # Convert Private Key To BitcoinGold Address BitcoinGold_Address = PrivateKey_To_BTG(key) Generated BitcoinGold Address From Mnemonic from Blockthon.Wallet import getMnemonic from Blockthon.BitcoinGold import Mnemonic_To_BTG # Generated Random Mnemonic with 12 word mnemonicWords = getMnemonic(12) # Convert To BitcoinGold Address BitcoinGold_Address = Mnemonic_To_BTG(mnemonicWords) Check Value Balance on BitcoinGold Address : from Blockthon.BitcoinGold import Balance_BTG BitcoinGold_Address = 'ADDRESS_BitcoinGold_WALLET' # checking return value on string Balance = Balance_BTG(BitcoinGold_Address)","title":"BitcoinGold With Blockthon"},{"location":"BitcoinGold_Wallet/#bitcoingold-with-blockthon","text":"","title":"BitcoinGold With Blockthon"},{"location":"BitcoinGold_Wallet/#generated-and-convert-private-key-hex-to-bitcoingold-address","text":"from Blockthon.BitcoinGold import PrivateKey_To_BTG import os # Generate Random Private Key key = os.urandom(32).hex() # Convert Private Key To BitcoinGold Address BitcoinGold_Address = PrivateKey_To_BTG(key)","title":"Generated and Convert Private Key (HEX) To BitcoinGold Address"},{"location":"BitcoinGold_Wallet/#generated-bitcoingold-address-from-mnemonic","text":"from Blockthon.Wallet import getMnemonic from Blockthon.BitcoinGold import Mnemonic_To_BTG # Generated Random Mnemonic with 12 word mnemonicWords = getMnemonic(12) # Convert To BitcoinGold Address BitcoinGold_Address = Mnemonic_To_BTG(mnemonicWords)","title":"Generated BitcoinGold Address From Mnemonic"},{"location":"BitcoinGold_Wallet/#check-value-balance-on-bitcoingold-address","text":"from Blockthon.BitcoinGold import Balance_BTG BitcoinGold_Address = 'ADDRESS_BitcoinGold_WALLET' # checking return value on string Balance = Balance_BTG(BitcoinGold_Address)","title":"Check Value Balance on BitcoinGold Address :"},{"location":"Bitcoin_Wallet/","text":"Bitcoin Wallet With Blockthon Generated and convert Private key To Mnemonic , seed (bytes) , Root Key , Passphrase , binary for Compress , Uncompress , P2PKH , P2SH , P2WSH, P2WPKH , P2WPKHinP2SH, P2WSHinP2SH Address Bitcoin Wallet Generated and Convert Private Key Hex To Compress and uncompress Bitcoin wallet from Blockthon.Wallet import PrivateKey_To_CompressAddr,PrivateKey_To_UnCompressAddr, PrivateKey # generated private key privatekey = PrivateKey() # convert private key (hex) to compressed Bitcoin Address compressAddress = PrivateKey_To_CompressAddr(privatekey) # uncompress uncompressAddress = PrivateKey_To_UnCompressAddr(privatekey) Generated and Convert Private Key HEX To Compressed and UnCompressed Bitcoin Address Wallet can use Blockthon.Bitcoin import PrivateKey_To_Address with param privatekey & Just Type='compress' : from Blockthon.Wallet import PrivateKey_To_Addr, PrivateKey privatekey = PrivateKey() # compress bitcoin address compressAddress = PrivateKey_To_Addr(privatekey, compress=True) # uncompress bitcoin address uncompressAddress = PrivateKey_To_Addr(privatekey, compress=False) Generated Convert Private Key To All Bitcoin Address Wallet Type Blockthon.Wallet privatekey Type PrivateKey_To_Addr hex (string) compress PrivateKey_To_Addr(key, Type='compress') PrivateKey_To_Addr hex (string) uncompress PrivateKey_To_Addr(key, Type='uncompress') PrivateKey_To_Addr hex (string) P2PKH PrivateKey_To_Addr(key, Type='P2PKH') PrivateKey_To_Addr hex (string) P2SH PrivateKey_To_Addr(key, Type='P2SH') PrivateKey_To_Addr hex (string) P2WPKH PrivateKey_To_Addr(key, Type='P2WPKH') PrivateKey_To_Addr hex (string) P2WSH PrivateKey_To_Addr(key, Type='P2WSH') PrivateKey_To_Addr hex (string) P2WPKHinP2SH PrivateKey_To_Addr(key, Type='P2WPKHinP2SH') PrivateKey_To_Addr hex (string) P2WSHinP2SH PrivateKey_To_Addr(key, Type='P2WSHinP2SH') example : from Blockthon.Bitcoin import PrivateKey_To_Addr import os key = os.urandom(32).hex() # Convert Private Key HEX To Compress Address compress_Address = PrivateKey_To_Addr(key, 'compress') # Convert Private Key HEX To Un Compress Address uncompress_Address = PrivateKey_To_Addr(key, 'uncompress') # Convert Private Key HEX To P2PKH Address Type p2pkh_Address = PrivateKey_To_Addr(key, 'P2PKH') # Convert Private Key HEX To P2SH Address Type p2sh_Address = PrivateKey_To_Addr(key, 'P2SH') # Convert Private Key HEX To P2WPKH Address Type p2wpkh_Address = PrivateKey_To_Addr(key, 'P2WPKH') # Convert Private Key HEX To P2WSH Address Type p2wsh_Address = PrivateKey_To_Addr(key, 'P2WSH') # Convert Private Key HEX To P2WPKH in P2SH Address Type p2wpkhinp2sh_Address = PrivateKey_To_Addr(key, 'P2WPKHinP2SH') # Convert Private Key HEX To P2WSH in P2SH Address Type p2wshinp2sh_Address = PrivateKey_To_Addr(key, 'P2WSHinP2SH') Generated and Convert Mnemonic To Bitcoin Address Wallet from Blockthon.Wallet import getMnemonic from Blockthon.Bitcoin import Mnemonic_To_PrivateKey mnemonicword = getMnemonic(12) # convert mnemonic to private key hex privatekey = Mnemonic_To_PrivateKey(mnemonicword) Convert Wif To Bitcoin Address from Blockthon.Bitcoin import Wif_To_Addr wif = \"YOUR_WIF_KEY\" # convert wif to address bitcoin address = Wif_To_Addr(wif) Convert Wif To Decimal (int) from Blockthon.Bitcoin import Wif_To_Dec wif = \"YOUR_WIF_KEY\" # convert wif to number (dec) dec = Wif_To_Dec(wif) Convert Wif To Private Key (hex) from Blockthon.Bitcoin import Wif_To_HEX wif = \"YOUR_WIF_KEY\" # convert wif to private key hex privatekey = Wif_To_HEX(wif)","title":"Bitcoin Wallet With Blockthon"},{"location":"Bitcoin_Wallet/#bitcoin-wallet-with-blockthon","text":"","title":"Bitcoin Wallet With Blockthon"},{"location":"Bitcoin_Wallet/#generated-and-convert-private-key-to-mnemonic-seed-bytes-root-key-passphrase-binary-for-compress-uncompress-p2pkh-p2sh-p2wsh-p2wpkh-p2wpkhinp2sh-p2wshinp2sh-address-bitcoin-wallet","text":"","title":"Generated and convert Private key To Mnemonic , seed (bytes) , Root Key , Passphrase , binary for Compress , Uncompress , P2PKH , P2SH , P2WSH, P2WPKH , P2WPKHinP2SH, P2WSHinP2SH Address Bitcoin Wallet"},{"location":"Bitcoin_Wallet/#generated-and-convert-private-key-hex-to-compress-and-uncompress-bitcoin-wallet","text":"from Blockthon.Wallet import PrivateKey_To_CompressAddr,PrivateKey_To_UnCompressAddr, PrivateKey # generated private key privatekey = PrivateKey() # convert private key (hex) to compressed Bitcoin Address compressAddress = PrivateKey_To_CompressAddr(privatekey) # uncompress uncompressAddress = PrivateKey_To_UnCompressAddr(privatekey)","title":"Generated and Convert Private Key Hex To Compress and uncompress Bitcoin wallet"},{"location":"Bitcoin_Wallet/#generated-and-convert-private-key-hex-to-compressed-and-uncompressed-bitcoin-address-wallet","text":"can use Blockthon.Bitcoin import PrivateKey_To_Address with param privatekey & Just Type='compress' : from Blockthon.Wallet import PrivateKey_To_Addr, PrivateKey privatekey = PrivateKey() # compress bitcoin address compressAddress = PrivateKey_To_Addr(privatekey, compress=True) # uncompress bitcoin address uncompressAddress = PrivateKey_To_Addr(privatekey, compress=False)","title":"Generated and Convert Private Key HEX To Compressed and UnCompressed Bitcoin Address Wallet"},{"location":"Bitcoin_Wallet/#generated-convert-private-key-to-all-bitcoin-address-wallet-type","text":"Blockthon.Wallet privatekey Type PrivateKey_To_Addr hex (string) compress PrivateKey_To_Addr(key, Type='compress') PrivateKey_To_Addr hex (string) uncompress PrivateKey_To_Addr(key, Type='uncompress') PrivateKey_To_Addr hex (string) P2PKH PrivateKey_To_Addr(key, Type='P2PKH') PrivateKey_To_Addr hex (string) P2SH PrivateKey_To_Addr(key, Type='P2SH') PrivateKey_To_Addr hex (string) P2WPKH PrivateKey_To_Addr(key, Type='P2WPKH') PrivateKey_To_Addr hex (string) P2WSH PrivateKey_To_Addr(key, Type='P2WSH') PrivateKey_To_Addr hex (string) P2WPKHinP2SH PrivateKey_To_Addr(key, Type='P2WPKHinP2SH') PrivateKey_To_Addr hex (string) P2WSHinP2SH PrivateKey_To_Addr(key, Type='P2WSHinP2SH') example : from Blockthon.Bitcoin import PrivateKey_To_Addr import os key = os.urandom(32).hex() # Convert Private Key HEX To Compress Address compress_Address = PrivateKey_To_Addr(key, 'compress') # Convert Private Key HEX To Un Compress Address uncompress_Address = PrivateKey_To_Addr(key, 'uncompress') # Convert Private Key HEX To P2PKH Address Type p2pkh_Address = PrivateKey_To_Addr(key, 'P2PKH') # Convert Private Key HEX To P2SH Address Type p2sh_Address = PrivateKey_To_Addr(key, 'P2SH') # Convert Private Key HEX To P2WPKH Address Type p2wpkh_Address = PrivateKey_To_Addr(key, 'P2WPKH') # Convert Private Key HEX To P2WSH Address Type p2wsh_Address = PrivateKey_To_Addr(key, 'P2WSH') # Convert Private Key HEX To P2WPKH in P2SH Address Type p2wpkhinp2sh_Address = PrivateKey_To_Addr(key, 'P2WPKHinP2SH') # Convert Private Key HEX To P2WSH in P2SH Address Type p2wshinp2sh_Address = PrivateKey_To_Addr(key, 'P2WSHinP2SH')","title":"Generated Convert Private Key To All Bitcoin Address Wallet Type"},{"location":"Bitcoin_Wallet/#generated-and-convert-mnemonic-to-bitcoin-address-wallet","text":"from Blockthon.Wallet import getMnemonic from Blockthon.Bitcoin import Mnemonic_To_PrivateKey mnemonicword = getMnemonic(12) # convert mnemonic to private key hex privatekey = Mnemonic_To_PrivateKey(mnemonicword)","title":"Generated and Convert Mnemonic To Bitcoin Address Wallet"},{"location":"Bitcoin_Wallet/#convert-wif-to-bitcoin-address","text":"from Blockthon.Bitcoin import Wif_To_Addr wif = \"YOUR_WIF_KEY\" # convert wif to address bitcoin address = Wif_To_Addr(wif)","title":"Convert Wif To Bitcoin Address"},{"location":"Bitcoin_Wallet/#convert-wif-to-decimal-int","text":"from Blockthon.Bitcoin import Wif_To_Dec wif = \"YOUR_WIF_KEY\" # convert wif to number (dec) dec = Wif_To_Dec(wif)","title":"Convert Wif To Decimal (int)"},{"location":"Bitcoin_Wallet/#convert-wif-to-private-key-hex","text":"from Blockthon.Bitcoin import Wif_To_HEX wif = \"YOUR_WIF_KEY\" # convert wif to private key hex privatekey = Wif_To_HEX(wif)","title":"Convert Wif To Private Key (hex)"},{"location":"Bytes/","text":"Bytes (seed) Generated Random Bytes (seed) from Blockthon.Wallet import getBytes # generated random bytes without repeat bytes_str = getBytes()","title":"Bytes (seed)"},{"location":"Bytes/#bytes-seed","text":"","title":"Bytes (seed)"},{"location":"Bytes/#generated-random-bytes-seed","text":"from Blockthon.Wallet import getBytes # generated random bytes without repeat bytes_str = getBytes()","title":"Generated Random Bytes (seed)"},{"location":"Bytes_To_Mnemonic/","text":"Bytes (seed) To Mnemonic (Word's) Convert and Generated Bytes to Mnemonic from Blockthon.Wallet import getBytes, Bytes_To_Mnemonic # generated random bytes without repeat bytes_str = getBytes() # Convert Bytes To Mnemonic Word's mnemonicWords = Bytes_To_Mnemonic(bytes_str)","title":"Bytes (seed) To Mnemonic (Word's)"},{"location":"Bytes_To_Mnemonic/#bytes-seed-to-mnemonic-words","text":"","title":"Bytes (seed) To Mnemonic (Word's)"},{"location":"Bytes_To_Mnemonic/#convert-and-generated-bytes-to-mnemonic","text":"from Blockthon.Wallet import getBytes, Bytes_To_Mnemonic # generated random bytes without repeat bytes_str = getBytes() # Convert Bytes To Mnemonic Word's mnemonicWords = Bytes_To_Mnemonic(bytes_str)","title":"Convert and Generated Bytes to Mnemonic"},{"location":"Bytes_To_PrivateKey/","text":"Bytes To Private Key (HEX) Convert and Generated Bytes To Private Key (HEX) from Blockthon.Wallet import getBytes, Bytes_To_PrivateKey # generated random bytes without repeat bytes_str = getBytes() # convert bytes to hex private key privatekey = Bytes_To_PrivateKey(bytestring=bytes_str)","title":"Bytes To Private Key (HEX)"},{"location":"Bytes_To_PrivateKey/#bytes-to-private-key-hex","text":"","title":"Bytes To Private Key (HEX)"},{"location":"Bytes_To_PrivateKey/#convert-and-generated-bytes-to-private-key-hex","text":"from Blockthon.Wallet import getBytes, Bytes_To_PrivateKey # generated random bytes without repeat bytes_str = getBytes() # convert bytes to hex private key privatekey = Bytes_To_PrivateKey(bytestring=bytes_str)","title":"Convert and Generated Bytes To Private Key (HEX)"},{"location":"Bytes_To_PublicKey/","text":"Bytes To Public Key Convert and Generated Bytes To Public Key from Blockthon.Wallet import getBytes, Bytes_To_PublicKey # generated random bytes without repeat bytes_str = getBytes() # Convert Bytes To Public Key (un compress) public_key = Bytes_To_PublicKey(bytes_str) Convert Bytes To Public Key Compress from Blockthon.Wallet import getBytes, Bytes_To_PublicKey # generated random bytes without repeat bytes_str = getBytes() # Convert Bytes To Public Key Compress public_key = Bytes_To_PublicKey(bytes_str, compress=True)","title":"Bytes To Public Key"},{"location":"Bytes_To_PublicKey/#bytes-to-public-key","text":"","title":"Bytes To Public Key"},{"location":"Bytes_To_PublicKey/#convert-and-generated-bytes-to-public-key","text":"from Blockthon.Wallet import getBytes, Bytes_To_PublicKey # generated random bytes without repeat bytes_str = getBytes() # Convert Bytes To Public Key (un compress) public_key = Bytes_To_PublicKey(bytes_str)","title":"Convert and Generated Bytes To Public Key"},{"location":"Bytes_To_PublicKey/#convert-bytes-to-public-key-compress","text":"from Blockthon.Wallet import getBytes, Bytes_To_PublicKey # generated random bytes without repeat bytes_str = getBytes() # Convert Bytes To Public Key Compress public_key = Bytes_To_PublicKey(bytes_str, compress=True)","title":"Convert Bytes To Public Key Compress"},{"location":"Bytes_To_Wif/","text":"Bytes (seed) To WIF Generated Bytes and Convert To WIF Generated and Convert Bytes To WIF Compressed : from Blockthon.Wallet import getBytes, Bytes_To_Wif # generated random bytes without repeat bytes_str = getBytes() # Convert Bytes To WIF Compress: WifCompress = Bytes_To_Wif(bytes_str, compressed=True) Generated and Convert Bytes To WIF UnCompressed : from Blockthon.Wallet import getBytes, Bytes_To_Wif # generated random bytes without repeat bytes_str = getBytes() # Convert Bytes To WIF Compress: WifCompress = Bytes_To_Wif(bytes_str, compressed=False)","title":"Bytes (seed) To WIF"},{"location":"Bytes_To_Wif/#bytes-seed-to-wif","text":"","title":"Bytes (seed) To WIF"},{"location":"Bytes_To_Wif/#generated-bytes-and-convert-to-wif","text":"Generated and Convert Bytes To WIF Compressed : from Blockthon.Wallet import getBytes, Bytes_To_Wif # generated random bytes without repeat bytes_str = getBytes() # Convert Bytes To WIF Compress: WifCompress = Bytes_To_Wif(bytes_str, compressed=True) Generated and Convert Bytes To WIF UnCompressed : from Blockthon.Wallet import getBytes, Bytes_To_Wif # generated random bytes without repeat bytes_str = getBytes() # Convert Bytes To WIF Compress: WifCompress = Bytes_To_Wif(bytes_str, compressed=False)","title":"Generated Bytes and Convert To WIF"},{"location":"DASH_Wallet/","text":"Dash With Blockthon Generated and Convert Private Key (HEX) To Dash Address from Blockthon.Dash import PrivateKey_To_DASH import os # Generate Random Private Key key = os.urandom(32).hex() # Convert Private Key To Dash Address Dash_Address = PrivateKey_To_DASH(key) Generated Dash Address From Mnemonic from Blockthon.Wallet import getMnemonic from Blockthon.Dash import Mnemonic_To_DASH # Generated Random Mnemonic with 12 word mnemonicWords = getMnemonic(12) # Convert To Dash Address Dash_Address = Mnemonic_To_DASH(mnemonicWords) Check Value Balance on Dash Address : from Blockthon.Dash import Balance_DASH Dash_Address = 'ADDRESS_Dash_WALLET' # checking return value on string Balance = Balance_DASH(Dash_Address)","title":"Dash With Blockthon"},{"location":"DASH_Wallet/#dash-with-blockthon","text":"","title":"Dash With Blockthon"},{"location":"DASH_Wallet/#generated-and-convert-private-key-hex-to-dash-address","text":"from Blockthon.Dash import PrivateKey_To_DASH import os # Generate Random Private Key key = os.urandom(32).hex() # Convert Private Key To Dash Address Dash_Address = PrivateKey_To_DASH(key)","title":"Generated and Convert Private Key (HEX) To Dash Address"},{"location":"DASH_Wallet/#generated-dash-address-from-mnemonic","text":"from Blockthon.Wallet import getMnemonic from Blockthon.Dash import Mnemonic_To_DASH # Generated Random Mnemonic with 12 word mnemonicWords = getMnemonic(12) # Convert To Dash Address Dash_Address = Mnemonic_To_DASH(mnemonicWords)","title":"Generated Dash Address From Mnemonic"},{"location":"DASH_Wallet/#check-value-balance-on-dash-address","text":"from Blockthon.Dash import Balance_DASH Dash_Address = 'ADDRESS_Dash_WALLET' # checking return value on string Balance = Balance_DASH(Dash_Address)","title":"Check Value Balance on Dash Address :"},{"location":"DigiByte_Wallet/","text":"DigiByte With Blockthon Generated and Convert Private Key (HEX) To DigiByte Address from Blockthon.DigiByte import PrivateKey_To_DGB import os # Generate Random Private Key key = os.urandom(32).hex() # Convert Private Key To DigiByte Address DigiByte_Address = PrivateKey_To_DGB(key) Generated DigiByte Address From Mnemonic from Blockthon.Wallet import getMnemonic from Blockthon.DigiByte import Mnemonic_To_DGB # Generated Random Mnemonic with 12 word mnemonicWords = getMnemonic(12) # Convert To DigiByte Address DigiByte_Address = Mnemonic_To_DGB(mnemonicWords) Check Value Balance on DigiByte Address : from Blockthon.DigiByte import Balance_DGB DigiByte_Address = 'ADDRESS_DigiByte_WALLET' # checking return value on string Balance = Balance_DGB(DigiByte_Address)","title":"DigiByte With Blockthon"},{"location":"DigiByte_Wallet/#digibyte-with-blockthon","text":"","title":"DigiByte With Blockthon"},{"location":"DigiByte_Wallet/#generated-and-convert-private-key-hex-to-digibyte-address","text":"from Blockthon.DigiByte import PrivateKey_To_DGB import os # Generate Random Private Key key = os.urandom(32).hex() # Convert Private Key To DigiByte Address DigiByte_Address = PrivateKey_To_DGB(key)","title":"Generated and Convert Private Key (HEX) To DigiByte Address"},{"location":"DigiByte_Wallet/#generated-digibyte-address-from-mnemonic","text":"from Blockthon.Wallet import getMnemonic from Blockthon.DigiByte import Mnemonic_To_DGB # Generated Random Mnemonic with 12 word mnemonicWords = getMnemonic(12) # Convert To DigiByte Address DigiByte_Address = Mnemonic_To_DGB(mnemonicWords)","title":"Generated DigiByte Address From Mnemonic"},{"location":"DigiByte_Wallet/#check-value-balance-on-digibyte-address","text":"from Blockthon.DigiByte import Balance_DGB DigiByte_Address = 'ADDRESS_DigiByte_WALLET' # checking return value on string Balance = Balance_DGB(DigiByte_Address)","title":"Check Value Balance on DigiByte Address :"},{"location":"Dogecoin_Wallet/","text":"Dogecoin With Blockthon Generated and Convert Private Key (HEX) To Dogecoin Address from Blockthon.Dogecoin import PrivateKey_To_DOGE import os # Generate Random Private Key key = os.urandom(32).hex() # Convert Private Key To Dogecoin Address Dogecoin_Address = PrivateKey_To_DOGE(key) Generated Dogecoin Address From Mnemonic from Blockthon.Wallet import getMnemonic from Blockthon.Dogecoin import Mnemonic_To_DOGE # Generated Random Mnemonic with 12 word mnemonicWords = getMnemonic(12) # Convert To Dogecoin Address Dogecoin_Address = Mnemonic_To_DOGE(mnemonicWords) Check Value Balance on Dogecoin Address : from Blockthon.Dogecoin import Balance_DOGE Dogecoin_Address = 'ADDRESS_Dogecoin_WALLET' # checking return value on string Balance = Balance_DOGE(Dogecoin_Address)","title":"Dogecoin With Blockthon"},{"location":"Dogecoin_Wallet/#dogecoin-with-blockthon","text":"","title":"Dogecoin With Blockthon"},{"location":"Dogecoin_Wallet/#generated-and-convert-private-key-hex-to-dogecoin-address","text":"from Blockthon.Dogecoin import PrivateKey_To_DOGE import os # Generate Random Private Key key = os.urandom(32).hex() # Convert Private Key To Dogecoin Address Dogecoin_Address = PrivateKey_To_DOGE(key)","title":"Generated and Convert Private Key (HEX) To Dogecoin Address"},{"location":"Dogecoin_Wallet/#generated-dogecoin-address-from-mnemonic","text":"from Blockthon.Wallet import getMnemonic from Blockthon.Dogecoin import Mnemonic_To_DOGE # Generated Random Mnemonic with 12 word mnemonicWords = getMnemonic(12) # Convert To Dogecoin Address Dogecoin_Address = Mnemonic_To_DOGE(mnemonicWords)","title":"Generated Dogecoin Address From Mnemonic"},{"location":"Dogecoin_Wallet/#check-value-balance-on-dogecoin-address","text":"from Blockthon.Dogecoin import Balance_DOGE Dogecoin_Address = 'ADDRESS_Dogecoin_WALLET' # checking return value on string Balance = Balance_DOGE(Dogecoin_Address)","title":"Check Value Balance on Dogecoin Address :"},{"location":"Ethereum_Wallet/","text":"Ethereum With Blockthon Generated and Convert Private Key (HEX) To Ethereum Address from Blockthon.Ethereum import PrivateKey_To_ETH import os # Generate Random Private Key key = os.urandom(32).hex() # Convert Private Key To Ethereum Address Ethereum_Address = PrivateKey_To_ETH(key) Generated Ethereum Address From Mnemonic from Blockthon.Wallet import getMnemonic from Blockthon.Ethereum import Mnemonic_To_ETH # Generated Random Mnemonic with 12 word mnemonicWords = getMnemonic(12) # Convert To Ethereum Address Ethereum_Address = Mnemonic_To_ETH(mnemonicWords) Check Value Balance on Ethereum Address : from Blockthon.Ethereum import Balance_ETH Ethereum_Address = 'ADDRESS_Ethereum_WALLET' # checking return value on string Balance = Balance_ETH(Ethereum_Address)","title":"Ethereum With Blockthon"},{"location":"Ethereum_Wallet/#ethereum-with-blockthon","text":"","title":"Ethereum With Blockthon"},{"location":"Ethereum_Wallet/#generated-and-convert-private-key-hex-to-ethereum-address","text":"from Blockthon.Ethereum import PrivateKey_To_ETH import os # Generate Random Private Key key = os.urandom(32).hex() # Convert Private Key To Ethereum Address Ethereum_Address = PrivateKey_To_ETH(key)","title":"Generated and Convert Private Key (HEX) To Ethereum Address"},{"location":"Ethereum_Wallet/#generated-ethereum-address-from-mnemonic","text":"from Blockthon.Wallet import getMnemonic from Blockthon.Ethereum import Mnemonic_To_ETH # Generated Random Mnemonic with 12 word mnemonicWords = getMnemonic(12) # Convert To Ethereum Address Ethereum_Address = Mnemonic_To_ETH(mnemonicWords)","title":"Generated Ethereum Address From Mnemonic"},{"location":"Ethereum_Wallet/#check-value-balance-on-ethereum-address","text":"from Blockthon.Ethereum import Balance_ETH Ethereum_Address = 'ADDRESS_Ethereum_WALLET' # checking return value on string Balance = Balance_ETH(Ethereum_Address)","title":"Check Value Balance on Ethereum Address :"},{"location":"Litecoin_Wallet/","text":"Litecoin With Blockthon Generated and Convert Private Key (HEX) To Litecoin Address from Blockthon.Litecoin import PrivateKey_To_LTC import os # Generate Random Private Key key = os.urandom(32).hex() # Convert Private Key To Litecoin Address Litecoin_Address = PrivateKey_To_LTC(key) Generated Litecoin Address From Mnemonic from Blockthon.Wallet import getMnemonic from Blockthon.Litecoin import Mnemonic_To_LTC # Generated Random Mnemonic with 12 word mnemonicWords = getMnemonic(12) # Convert To Litecoin Address Litecoin_Address = Mnemonic_To_LTC(mnemonicWords) Check Value Balance on Litecoin Address : from Blockthon.Litecoin import Balance_LTC Litecoin_Address = 'ADDRESS_Litecoin_WALLET' # checking return value on string Balance = Balance_LTC(Litecoin_Address)","title":"Litecoin With Blockthon"},{"location":"Litecoin_Wallet/#litecoin-with-blockthon","text":"","title":"Litecoin With Blockthon"},{"location":"Litecoin_Wallet/#generated-and-convert-private-key-hex-to-litecoin-address","text":"from Blockthon.Litecoin import PrivateKey_To_LTC import os # Generate Random Private Key key = os.urandom(32).hex() # Convert Private Key To Litecoin Address Litecoin_Address = PrivateKey_To_LTC(key)","title":"Generated and Convert Private Key (HEX) To Litecoin Address"},{"location":"Litecoin_Wallet/#generated-litecoin-address-from-mnemonic","text":"from Blockthon.Wallet import getMnemonic from Blockthon.Litecoin import Mnemonic_To_LTC # Generated Random Mnemonic with 12 word mnemonicWords = getMnemonic(12) # Convert To Litecoin Address Litecoin_Address = Mnemonic_To_LTC(mnemonicWords)","title":"Generated Litecoin Address From Mnemonic"},{"location":"Litecoin_Wallet/#check-value-balance-on-litecoin-address","text":"from Blockthon.Litecoin import Balance_LTC Litecoin_Address = 'ADDRESS_Litecoin_WALLET' # checking return value on string Balance = Balance_LTC(Litecoin_Address)","title":"Check Value Balance on Litecoin Address :"},{"location":"Mnemonic/","text":"Mnemonic Generated Random Mnemonic Word's from Blockthon.Wallet import getMnemonic # generated random Mnemonic words [without repeat] mnemonic_words = getMnemonic(size=12) can changed param size with integer 12 . 18 , 24 , example if needed 24 word : from Blockthon.Wallet import getMnemonic # with 24 word mnemonicWords = getMnemonic(24) # or with 18 word mnemonicwords = getMnemonic(size=18) size default : size=12 type: int","title":"Mnemonic"},{"location":"Mnemonic/#mnemonic","text":"","title":"Mnemonic"},{"location":"Mnemonic/#generated-random-mnemonic-words","text":"from Blockthon.Wallet import getMnemonic # generated random Mnemonic words [without repeat] mnemonic_words = getMnemonic(size=12) can changed param size with integer 12 . 18 , 24 , example if needed 24 word : from Blockthon.Wallet import getMnemonic # with 24 word mnemonicWords = getMnemonic(24) # or with 18 word mnemonicwords = getMnemonic(size=18) size default : size=12 type: int","title":"Generated Random Mnemonic Word's"},{"location":"Mnemonic_To_Bytes/","text":"Convert Mnemonic To Bytes Generated and Convert Mnemonic To Bytes (seed) from Blockthon.Wallet import Mnemonic_To_Bytes, getMnemonic # generated random mnemonic 12 word mnemonicWords = getMnemonic(size=12) # convert Mnemonic to seed Bytes bytes_string = Mnemonic_To_Bytes(mnemonicWords)","title":"Mnemonic To Bytes"},{"location":"Mnemonic_To_Bytes/#convert-mnemonic-to-bytes","text":"","title":"Convert Mnemonic To Bytes"},{"location":"Mnemonic_To_Bytes/#generated-and-convert-mnemonic-to-bytes-seed","text":"from Blockthon.Wallet import Mnemonic_To_Bytes, getMnemonic # generated random mnemonic 12 word mnemonicWords = getMnemonic(size=12) # convert Mnemonic to seed Bytes bytes_string = Mnemonic_To_Bytes(mnemonicWords)","title":"Generated and Convert Mnemonic To Bytes (seed)"},{"location":"Mnemonic_To_RootKey/","text":"Mnemonic To XPRV (Root Key) Generated and Convert Mnemonic Word's To XPRV (Root Key): from Blockthon.Wallet import Mnemonic_To_RootKey, getMnemonic # Generated Random mnemonic with 12 word mnemonicWords = getMnemonic(12) # Convert mnemonic to Root key (xprv) xprv = Mnemonic_To_RootKey(mnemonicWords)","title":"Mnemonic To XPRV (Root Key)"},{"location":"Mnemonic_To_RootKey/#mnemonic-to-xprv-root-key","text":"","title":"Mnemonic To XPRV (Root Key)"},{"location":"Mnemonic_To_RootKey/#generated-and-convert-mnemonic-words-to-xprv-root-key","text":"from Blockthon.Wallet import Mnemonic_To_RootKey, getMnemonic # Generated Random mnemonic with 12 word mnemonicWords = getMnemonic(12) # Convert mnemonic to Root key (xprv) xprv = Mnemonic_To_RootKey(mnemonicWords)","title":"Generated and Convert Mnemonic Word's To XPRV (Root Key):"},{"location":"PrivateKey/","text":"Generated Random Private Key (without repeat) with Blockthon : generated random hex private key without repeat in batch generated from Blockthon.Wallet import PrivateKey # Generated random Private Key privatekey = PrivateKey()","title":"PrivateKey"},{"location":"PrivateKey/#generated-random-private-key-without-repeat-with-blockthon","text":"generated random hex private key without repeat in batch generated from Blockthon.Wallet import PrivateKey # Generated random Private Key privatekey = PrivateKey()","title":"Generated Random Private Key (without repeat) with Blockthon:"},{"location":"PrivateKey_From_Binary/","text":"convert binary to private key hex Binary To HEX Private Key From Binary generated random binary string for convert to hex private key from Blockthon.Wallet import getBin # generated binary with 256 size (default: 256) binary_string = getBin(256) convert binary to private key hex with Blockthon : from Blockthon.Wallet import PrivateKey_From_Binary, getBin # generated random binary with 256 size binary_atring = getBin(size=256) # convert binary to private key hex: privatekey = PrivateKey_From_Binary(binary_atring)","title":"PrivateKey From Binary"},{"location":"PrivateKey_From_Binary/#convert-binary-to-private-key-hex","text":"","title":"convert binary to private key hex"},{"location":"PrivateKey_From_Binary/#binary-to-hex","text":"","title":"Binary To HEX"},{"location":"PrivateKey_From_Binary/#private-key-from-binary","text":"generated random binary string for convert to hex private key from Blockthon.Wallet import getBin # generated binary with 256 size (default: 256) binary_string = getBin(256) convert binary to private key hex with Blockthon : from Blockthon.Wallet import PrivateKey_From_Binary, getBin # generated random binary with 256 size binary_atring = getBin(size=256) # convert binary to private key hex: privatekey = PrivateKey_From_Binary(binary_atring)","title":"Private Key From Binary"},{"location":"PrivateKey_From_Dec/","text":"convert number (dec) to Private key: generated random number (decimal) convert to Private key in this example can see how to generate random number and convert to private key (Private Key From Dec) from Blockthon.Wallet import PrivateKey_From_Dec # dec or number just entered integer dec = 10000 # convert dec (10000) to private key hex privatekey = PrivateKey_From_Dec(dec) another method , use PrivateKey_From_Number : from Blockthon.Wallet import PrivateKey_From_Number dec = 10000 # convert number 10000 to private key hex: privatekey = PrivateKey_From_Number(number=dec)","title":"PrivateKey From Dec"},{"location":"PrivateKey_From_Dec/#convert-number-dec-to-private-key","text":"","title":"convert number (dec) to Private key:"},{"location":"PrivateKey_From_Dec/#generated-random-number-decimal-convert-to-private-key","text":"in this example can see how to generate random number and convert to private key (Private Key From Dec) from Blockthon.Wallet import PrivateKey_From_Dec # dec or number just entered integer dec = 10000 # convert dec (10000) to private key hex privatekey = PrivateKey_From_Dec(dec) another method , use PrivateKey_From_Number : from Blockthon.Wallet import PrivateKey_From_Number dec = 10000 # convert number 10000 to private key hex: privatekey = PrivateKey_From_Number(number=dec)","title":"generated random number (decimal) convert to Private key"},{"location":"PrivateKey_From_Passphrase/","text":"convert passphrase (word) to Private Key (HEX) generate Private Key Hex From Word (Passphrase) example for convert passphrase word (string) to hex private key: from Blockthon.Wallet import PrivateKey_From_Passphrase # passphrase word : passphrase_string = 'Mmdrza.Com' # Convert Passphrase Word to Private Key Hex: privatekey = PrivateKey_From_Passphrase(passphrase=passphrase_string)","title":"PrivateKey From Passphrase"},{"location":"PrivateKey_From_Passphrase/#convert-passphrase-word-to-private-key-hex","text":"","title":"convert passphrase (word) to Private Key (HEX)"},{"location":"PrivateKey_From_Passphrase/#generate-private-key-hex-from-word-passphrase","text":"example for convert passphrase word (string) to hex private key: from Blockthon.Wallet import PrivateKey_From_Passphrase # passphrase word : passphrase_string = 'Mmdrza.Com' # Convert Passphrase Word to Private Key Hex: privatekey = PrivateKey_From_Passphrase(passphrase=passphrase_string)","title":"generate Private Key Hex From Word (Passphrase)"},{"location":"PrivateKey_From_RootKey/","text":"convert root key (xprv) to private key Private key from root key (xprv) from Blockthon.Wallet import PrivateKey_From_RootKey # example root key , can enter your xprv xprv_string = 'xprv123456789...abcdefgABCDRFGTHG98741235' # convert root key xprv to hex private key privatekey = PrivateKey_From_RootKey(xprv=xprv_string)","title":"PrivateKey From RootKey"},{"location":"PrivateKey_From_RootKey/#convert-root-key-xprv-to-private-key","text":"","title":"convert root key (xprv) to private key"},{"location":"PrivateKey_From_RootKey/#private-key-from-root-key-xprv","text":"from Blockthon.Wallet import PrivateKey_From_RootKey # example root key , can enter your xprv xprv_string = 'xprv123456789...abcdefgABCDRFGTHG98741235' # convert root key xprv to hex private key privatekey = PrivateKey_From_RootKey(xprv=xprv_string)","title":"Private key from root key (xprv)"},{"location":"PrivateKey_To_Binary/","text":"Convert Private Key Hex to Binary Binary from Private Key Hex in this example can see how to created new private key (hex) and convert to binary with blockthon from Blockthon.Wallet import PrivateKey, PrivateKey_To_Binary # generated private key random key = PrivateKey() # convert Private key (hex) to binary: binary_data = PrivateKey_To_Binary(key)","title":"PrivateKey To Binary"},{"location":"PrivateKey_To_Binary/#convert-private-key-hex-to-binary","text":"","title":"Convert Private Key Hex to Binary"},{"location":"PrivateKey_To_Binary/#binary-from-private-key-hex","text":"in this example can see how to created new private key (hex) and convert to binary with blockthon from Blockthon.Wallet import PrivateKey, PrivateKey_To_Binary # generated private key random key = PrivateKey() # convert Private key (hex) to binary: binary_data = PrivateKey_To_Binary(key)","title":"Binary from Private Key Hex"},{"location":"PrivateKey_To_Bytes/","text":"Generated And Convert Private Key HEX To Bytes (seed) generated random private key (hex) and Convert to seed (bytes) with Blockthon from Blockthon.Wallet import PrivateKey, PrivateKey_To_Bytes # Generated Random Private Key privatekey = PrivateKey() # convert Private Key Hex To Bytes (seed) bytes_string = PrivateKey_To_Bytes(privatekey)","title":"PrivateKey To Bytes"},{"location":"PrivateKey_To_Bytes/#generated-and-convert-private-key-hex-to-bytes-seed","text":"generated random private key (hex) and Convert to seed (bytes) with Blockthon from Blockthon.Wallet import PrivateKey, PrivateKey_To_Bytes # Generated Random Private Key privatekey = PrivateKey() # convert Private Key Hex To Bytes (seed) bytes_string = PrivateKey_To_Bytes(privatekey)","title":"Generated And Convert Private Key HEX To Bytes (seed)"},{"location":"PrivateKey_To_Compress_Addr/","text":"Convert Private Key Hex to compress Address generated random Private Key and convert to compress bitcoin address on blockthon with 3 different method from Blockthon.Wallet import PrivateKey_To_CompressAddr, PrivateKey # convert private key (hex) to compressed Bitcoin Address compressAddress = PrivateKey_To_CompressAddr(PrivateKey()) or can use PrivateKey_To_Addr on Blockthon.Wallet , param:[privatekey(str), compress=True/False] return compressAddress on string type: from Blockthon.Wallet import PrivateKey_To_Addr, PrivateKey privatekey = PrivateKey() compressAddress = PrivateKey_To_Addr(privatekey, compress=True) or can use Blockthon.Bitcoin import PrivateKey_To_Address with param privatekey & Just Type='compress' : from Blockthon.Bitcoin import PrivateKey_To_Address import os privatekey = os.urandom(32).hex() # in Type Parameter can use : P2PKH / P2SH / P2WPKH / P2WSH / P2WPKHinP2SH / P2WSHinP2SH / compress / uncompress compressAddr = PrivateKey_To_Address(privatekey, Type='compress') or use Blockthon.Wallet in PrivateKey_To_Address (Very Fast): from Blockthon.Wallet import PrivateKey_To_Address, PrivateKey # convert hex to compressed address compressed_Address = PrivateKey_To_Address(PrivateKey(), compress=True)","title":"PrivateKey To Compress Addr"},{"location":"PrivateKey_To_Compress_Addr/#convert-private-key-hex-to-compress-address","text":"generated random Private Key and convert to compress bitcoin address on blockthon with 3 different method from Blockthon.Wallet import PrivateKey_To_CompressAddr, PrivateKey # convert private key (hex) to compressed Bitcoin Address compressAddress = PrivateKey_To_CompressAddr(PrivateKey()) or can use PrivateKey_To_Addr on Blockthon.Wallet , param:[privatekey(str), compress=True/False] return compressAddress on string type: from Blockthon.Wallet import PrivateKey_To_Addr, PrivateKey privatekey = PrivateKey() compressAddress = PrivateKey_To_Addr(privatekey, compress=True) or can use Blockthon.Bitcoin import PrivateKey_To_Address with param privatekey & Just Type='compress' : from Blockthon.Bitcoin import PrivateKey_To_Address import os privatekey = os.urandom(32).hex() # in Type Parameter can use : P2PKH / P2SH / P2WPKH / P2WSH / P2WPKHinP2SH / P2WSHinP2SH / compress / uncompress compressAddr = PrivateKey_To_Address(privatekey, Type='compress') or use Blockthon.Wallet in PrivateKey_To_Address (Very Fast): from Blockthon.Wallet import PrivateKey_To_Address, PrivateKey # convert hex to compressed address compressed_Address = PrivateKey_To_Address(PrivateKey(), compress=True)","title":"Convert Private Key Hex to compress Address"},{"location":"PrivateKey_To_Dec/","text":"Private Key to Decimal (Number) integer convert and generated private key hex to number (dec) generated dec (int) from Private key hex: from Blockthon.Wallet import PrivateKey_To_Dec, PrivateKey # generated private key key = PrivateKey() # convert private key dec = PrivateKey_To_Dec(key)","title":"PrivateKey To Dec"},{"location":"PrivateKey_To_Dec/#private-key-to-decimal-number-integer","text":"","title":"Private Key to Decimal (Number) integer"},{"location":"PrivateKey_To_Dec/#convert-and-generated-private-key-hex-to-number-dec","text":"generated dec (int) from Private key hex: from Blockthon.Wallet import PrivateKey_To_Dec, PrivateKey # generated private key key = PrivateKey() # convert private key dec = PrivateKey_To_Dec(key)","title":"convert and generated private key hex to number (dec)"},{"location":"PrivateKey_To_Mnemonics/","text":"Generated and convert Private Key Hex To Mnemonic Word's: generated private key with blockthon and convert private key (hex) to mnemonic: PrivateKey_To_Mnemonics(privatekey: str) from Blockthon.Wallet import PrivateKey_To_Mnemonics, PrivateKey # Private Key Hex [str] privatekey = PrivateKey() # convert Private Key [hex] to Mnemonic string (word's) mnemonic_Words = PrivateKey_To_Mnemonics(privatekey) Generated Private Key , Convert To Mnemonic and Create compress & uncompress address bitcoin wallet: example : generated private key hex convert To mnemonic word's and create compress and uncompress bitcoin address wallet with check value balance per address: from Blockthon.Wallet import PrivateKey, PrivateKey_To_Mnemonics from Blockthon.Bitcoin import Balance_BTC, PrivateKey_To_Address # counter per process count = 0 # counter total found address with value balance found = 0 while True: count += 1 # Generated Private Key HEX Without Repeat key = PrivateKey() # Convert Private Key To Mnemonic String mnemonicWords = PrivateKey_To_Mnemonics(key) # Convert Private Key To Compress Bitcoin Address compressAddr = PrivateKey_To_Address(key, 'compress') # Convert Private Key To UnCompress Bitcoin Address uncompressAddr = PrivateKey_To_Address(key, 'uncompress') # Check Balance Value Compress Address balance_compress = Balance_BTC(compressAddr) # Check Balance Value UnCompress Address balance_uncompress = Balance_BTC(uncompressAddr) if balance_uncompress != '0' or balance_compress != '0': found += 1 # if Value Balance per Address > 0 Save All Detail's To Found.txt open('Found.txt', 'a').write(f'{compressAddr} - {balance_compress}\\n{uncompressAddr} - {balance_compress}\\n{key}\\n{mnemonicWords}\\n') else: # else , Balance == 0 print detail's print(f\"Checked:{count} / Found:{found} # {compressAddr} : {balance_compress}\") print(f\"Checked:{count} / Found:{found} # {uncompressAddr} : {balance_uncompress}\") print(f\"Checked:{count} / Found:{found} # {key}\") print(f\"Checked:{count} / Found:{found} # {mnemonicWords}\") print(f\"{'-' * 70}\")","title":"PrivateKey To Mnemonics"},{"location":"PrivateKey_To_Mnemonics/#generated-and-convert-private-key-hex-to-mnemonic-words","text":"generated private key with blockthon and convert private key (hex) to mnemonic: PrivateKey_To_Mnemonics(privatekey: str) from Blockthon.Wallet import PrivateKey_To_Mnemonics, PrivateKey # Private Key Hex [str] privatekey = PrivateKey() # convert Private Key [hex] to Mnemonic string (word's) mnemonic_Words = PrivateKey_To_Mnemonics(privatekey)","title":"Generated and convert Private Key Hex To Mnemonic Word's:"},{"location":"PrivateKey_To_Mnemonics/#generated-private-key-convert-to-mnemonic-and-create-compress-uncompress-address-bitcoin-wallet","text":"example : generated private key hex convert To mnemonic word's and create compress and uncompress bitcoin address wallet with check value balance per address: from Blockthon.Wallet import PrivateKey, PrivateKey_To_Mnemonics from Blockthon.Bitcoin import Balance_BTC, PrivateKey_To_Address # counter per process count = 0 # counter total found address with value balance found = 0 while True: count += 1 # Generated Private Key HEX Without Repeat key = PrivateKey() # Convert Private Key To Mnemonic String mnemonicWords = PrivateKey_To_Mnemonics(key) # Convert Private Key To Compress Bitcoin Address compressAddr = PrivateKey_To_Address(key, 'compress') # Convert Private Key To UnCompress Bitcoin Address uncompressAddr = PrivateKey_To_Address(key, 'uncompress') # Check Balance Value Compress Address balance_compress = Balance_BTC(compressAddr) # Check Balance Value UnCompress Address balance_uncompress = Balance_BTC(uncompressAddr) if balance_uncompress != '0' or balance_compress != '0': found += 1 # if Value Balance per Address > 0 Save All Detail's To Found.txt open('Found.txt', 'a').write(f'{compressAddr} - {balance_compress}\\n{uncompressAddr} - {balance_compress}\\n{key}\\n{mnemonicWords}\\n') else: # else , Balance == 0 print detail's print(f\"Checked:{count} / Found:{found} # {compressAddr} : {balance_compress}\") print(f\"Checked:{count} / Found:{found} # {uncompressAddr} : {balance_uncompress}\") print(f\"Checked:{count} / Found:{found} # {key}\") print(f\"Checked:{count} / Found:{found} # {mnemonicWords}\") print(f\"{'-' * 70}\")","title":"Generated Private Key , Convert To Mnemonic and Create compress &amp; uncompress address bitcoin wallet:"},{"location":"PrivateKey_To_Public_Hash_Addr/","text":"Public Key Hash Address convert private key hex to public key hash address from Blockthon.Wallet import PrivateKey_To_PublicHash, PrivateKey # generated private key hex key = PrivateKey() # convert and generated hash address from private key hex hashAddr = PrivateKey_To_PublicHash(key)","title":"PrivateKey To Public Hash Addr"},{"location":"PrivateKey_To_Public_Hash_Addr/#public-key-hash-address","text":"","title":"Public Key Hash Address"},{"location":"PrivateKey_To_Public_Hash_Addr/#convert-private-key-hex-to-public-key-hash-address","text":"from Blockthon.Wallet import PrivateKey_To_PublicHash, PrivateKey # generated private key hex key = PrivateKey() # convert and generated hash address from private key hex hashAddr = PrivateKey_To_PublicHash(key)","title":"convert private key hex to public key hash address"},{"location":"PrivateKey_To_RootKey/","text":"Generated Root Key (xprv) from Private Key hex convert Private Key hex to xprv (root key) in example can see how to generated random private key (hex) and convert to root key (xprv) with Blockthon : from Blockthon.Wallet import PrivateKey_To_RootKey, PrivateKey # generated random private key key = PrivateKey() # convert hex private key to xprv xprv_rootKey = PrivateKey_To_RootKey(key)","title":"PrivateKey To RootKey"},{"location":"PrivateKey_To_RootKey/#generated-root-key-xprv-from-private-key-hex","text":"","title":"Generated Root Key (xprv) from Private Key hex"},{"location":"PrivateKey_To_RootKey/#convert-private-key-hex-to-xprv-root-key","text":"in example can see how to generated random private key (hex) and convert to root key (xprv) with Blockthon : from Blockthon.Wallet import PrivateKey_To_RootKey, PrivateKey # generated random private key key = PrivateKey() # convert hex private key to xprv xprv_rootKey = PrivateKey_To_RootKey(key)","title":"convert Private Key hex to xprv (root key)"},{"location":"PrivateKey_To_UnCompress_Addr/","text":"Convert Private Key Hex to uncompress Address generated random Private Key and convert to uncompress bitcoin address on blockthon with 3 different method from Blockthon.Wallet import PrivateKey_To_UnCompressAddr, PrivateKey # generated private key privatekey = PrivateKey() # convert private key (hex) to uncompressed Bitcoin Address uncompressAddress = PrivateKey_To_UnCompressAddr(privatekey) or can use PrivateKey_To_Addr on Blockthon.Wallet , param:[privatekey(str), compress=True/False] return uncompressAddress on string type: from Blockthon.Wallet import PrivateKey_To_Addr, PrivateKey privatekey = PrivateKey() uncompressAddress = PrivateKey_To_Addr(privatekey, compress=False) or can use Blockthon.Bitcoin import PrivateKey_To_Address with param privatekey & Just Type='uncompress' : from Blockthon.Bitcoin import PrivateKey_To_Address import os privatekey = os.urandom(32).hex() # in Type Parameter can use : P2PKH / P2SH / P2WPKH / P2WSH / P2WPKHinP2SH / P2WSHinP2SH / compress / uncompress uncompressAddr = PrivateKey_To_Address(privatekey, Type='uncompress') from Blockthon.Wallet import PrivateKey_To_Address, PrivateKey # convert hex to uncompress address uncompress_Address = PrivateKey_To_Address(PrivateKey(), compress=False)","title":"PrivateKey To UnCompress Addr"},{"location":"PrivateKey_To_UnCompress_Addr/#convert-private-key-hex-to-uncompress-address","text":"generated random Private Key and convert to uncompress bitcoin address on blockthon with 3 different method from Blockthon.Wallet import PrivateKey_To_UnCompressAddr, PrivateKey # generated private key privatekey = PrivateKey() # convert private key (hex) to uncompressed Bitcoin Address uncompressAddress = PrivateKey_To_UnCompressAddr(privatekey) or can use PrivateKey_To_Addr on Blockthon.Wallet , param:[privatekey(str), compress=True/False] return uncompressAddress on string type: from Blockthon.Wallet import PrivateKey_To_Addr, PrivateKey privatekey = PrivateKey() uncompressAddress = PrivateKey_To_Addr(privatekey, compress=False) or can use Blockthon.Bitcoin import PrivateKey_To_Address with param privatekey & Just Type='uncompress' : from Blockthon.Bitcoin import PrivateKey_To_Address import os privatekey = os.urandom(32).hex() # in Type Parameter can use : P2PKH / P2SH / P2WPKH / P2WSH / P2WPKHinP2SH / P2WSHinP2SH / compress / uncompress uncompressAddr = PrivateKey_To_Address(privatekey, Type='uncompress') from Blockthon.Wallet import PrivateKey_To_Address, PrivateKey # convert hex to uncompress address uncompress_Address = PrivateKey_To_Address(PrivateKey(), compress=False)","title":"Convert Private Key Hex to uncompress Address"},{"location":"PrivateKey_To_Wif/","text":"Generated Private Key and Convert To WIF generated random private key hex to wif with Blockthon : for convert private key hex to wif compress or wif uncompress : from Blockthon.Wallet import PrivateKey_To_WIF, PrivateKey privatekey = PrivateKey() wif_compress = PrivateKey_To_WIF(privatekey, compress=True) wif_uncompress = PrivateKey_To_WIF(privatekey, compress=False)","title":"PrivateKey To Wif"},{"location":"PrivateKey_To_Wif/#generated-private-key-and-convert-to-wif","text":"generated random private key hex to wif with Blockthon : for convert private key hex to wif compress or wif uncompress : from Blockthon.Wallet import PrivateKey_To_WIF, PrivateKey privatekey = PrivateKey() wif_compress = PrivateKey_To_WIF(privatekey, compress=True) wif_uncompress = PrivateKey_To_WIF(privatekey, compress=False)","title":"Generated Private Key and Convert To WIF"},{"location":"Qtum_Wallet/","text":"Qtum With Blockthon Generated and Convert Private Key (HEX) To Qtum Address from Blockthon.Qtum import PrivateKey_To_QTUM import os # Generate Random Private Key key = os.urandom(32).hex() # Convert Private Key To Qtum Address Qtum_Address = PrivateKey_To_QTUM(key) Generated Qtum Address From Mnemonic from Blockthon.Wallet import getMnemonic from Blockthon.Qtum import Mnemonic_To_QTUM # Generated Random Mnemonic with 12 word mnemonicWords = getMnemonic(12) # Convert To Qtum Address Qtum_Address = Mnemonic_To_QTUM(mnemonicWords) Check Value Balance on Qtum Address : from Blockthon.Qtum import Balance_QTUM Qtum_Address = 'ADDRESS_Qtum_WALLET' # checking return value on string Balance = Balance_QTUM(Qtum_Address)","title":"Qtum With Blockthon"},{"location":"Qtum_Wallet/#qtum-with-blockthon","text":"","title":"Qtum With Blockthon"},{"location":"Qtum_Wallet/#generated-and-convert-private-key-hex-to-qtum-address","text":"from Blockthon.Qtum import PrivateKey_To_QTUM import os # Generate Random Private Key key = os.urandom(32).hex() # Convert Private Key To Qtum Address Qtum_Address = PrivateKey_To_QTUM(key)","title":"Generated and Convert Private Key (HEX) To Qtum Address"},{"location":"Qtum_Wallet/#generated-qtum-address-from-mnemonic","text":"from Blockthon.Wallet import getMnemonic from Blockthon.Qtum import Mnemonic_To_QTUM # Generated Random Mnemonic with 12 word mnemonicWords = getMnemonic(12) # Convert To Qtum Address Qtum_Address = Mnemonic_To_QTUM(mnemonicWords)","title":"Generated Qtum Address From Mnemonic"},{"location":"Qtum_Wallet/#check-value-balance-on-qtum-address","text":"from Blockthon.Qtum import Balance_QTUM Qtum_Address = 'ADDRESS_Qtum_WALLET' # checking return value on string Balance = Balance_QTUM(Qtum_Address)","title":"Check Value Balance on Qtum Address :"},{"location":"Ravencoin_Wallet/","text":"Ravencoin With Blockthon Generated and Convert Private Key (HEX) To Ravencoin Address from Blockthon.Ravencoin import PrivateKey_To_RVN import os # Generate Random Private Key key = os.urandom(32).hex() # Convert Private Key To Ravencoin Address Ravencoin_Address = PrivateKey_To_RVN(key) Generated Ravencoin Address From Mnemonic from Blockthon.Wallet import getMnemonic from Blockthon.Ravencoin import Mnemonic_To_RVN # Generated Random Mnemonic with 12 word mnemonicWords = getMnemonic(12) # Convert To Ravencoin Address Ravencoin_Address = Mnemonic_To_RVN(mnemonicWords) Check Value Balance on Ravencoin Address : from Blockthon.Ravencoin import Balance_RVN Ravencoin_Address = 'ADDRESS_Ravencoin_WALLET' # checking return value on string Balance = Balance_RVN(Ravencoin_Address)","title":"Ravencoin With Blockthon"},{"location":"Ravencoin_Wallet/#ravencoin-with-blockthon","text":"","title":"Ravencoin With Blockthon"},{"location":"Ravencoin_Wallet/#generated-and-convert-private-key-hex-to-ravencoin-address","text":"from Blockthon.Ravencoin import PrivateKey_To_RVN import os # Generate Random Private Key key = os.urandom(32).hex() # Convert Private Key To Ravencoin Address Ravencoin_Address = PrivateKey_To_RVN(key)","title":"Generated and Convert Private Key (HEX) To Ravencoin Address"},{"location":"Ravencoin_Wallet/#generated-ravencoin-address-from-mnemonic","text":"from Blockthon.Wallet import getMnemonic from Blockthon.Ravencoin import Mnemonic_To_RVN # Generated Random Mnemonic with 12 word mnemonicWords = getMnemonic(12) # Convert To Ravencoin Address Ravencoin_Address = Mnemonic_To_RVN(mnemonicWords)","title":"Generated Ravencoin Address From Mnemonic"},{"location":"Ravencoin_Wallet/#check-value-balance-on-ravencoin-address","text":"from Blockthon.Ravencoin import Balance_RVN Ravencoin_Address = 'ADDRESS_Ravencoin_WALLET' # checking return value on string Balance = Balance_RVN(Ravencoin_Address)","title":"Check Value Balance on Ravencoin Address :"},{"location":"Tron_Wallet/","text":"Tron With Blockthon Generated and Convert Private Key (HEX) To Tron Address from Blockthon.Tron import PrivateKey_To_TRX import os # Generate Random Private Key key = os.urandom(32).hex() # Convert Private Key To Tron Address Tron_Address = PrivateKey_To_TRX(key) Generated Tron Address From Mnemonic from Blockthon.Wallet import getMnemonic from Blockthon.Tron import Mnemonic_To_TRX # Generated Random Mnemonic with 12 word mnemonicWords = getMnemonic(12) # Convert To Tron Address Tron_Address = Mnemonic_To_TRX(mnemonicWords) Check Value Balance on Tron Address : from Blockthon.Tron import Balance_TRX Tron_Address = 'ADDRESS_Tron_WALLET' # checking return value on string Balance = Balance_TRX(Tron_Address)","title":"Tron With Blockthon"},{"location":"Tron_Wallet/#tron-with-blockthon","text":"","title":"Tron With Blockthon"},{"location":"Tron_Wallet/#generated-and-convert-private-key-hex-to-tron-address","text":"from Blockthon.Tron import PrivateKey_To_TRX import os # Generate Random Private Key key = os.urandom(32).hex() # Convert Private Key To Tron Address Tron_Address = PrivateKey_To_TRX(key)","title":"Generated and Convert Private Key (HEX) To Tron Address"},{"location":"Tron_Wallet/#generated-tron-address-from-mnemonic","text":"from Blockthon.Wallet import getMnemonic from Blockthon.Tron import Mnemonic_To_TRX # Generated Random Mnemonic with 12 word mnemonicWords = getMnemonic(12) # Convert To Tron Address Tron_Address = Mnemonic_To_TRX(mnemonicWords)","title":"Generated Tron Address From Mnemonic"},{"location":"Tron_Wallet/#check-value-balance-on-tron-address","text":"from Blockthon.Tron import Balance_TRX Tron_Address = 'ADDRESS_Tron_WALLET' # checking return value on string Balance = Balance_TRX(Tron_Address)","title":"Check Value Balance on Tron Address :"},{"location":"zCash_Wallet/","text":"zCash With Blockthon Generated and Convert Private Key (HEX) To zCash Address from Blockthon.zCash import PrivateKey_To_ZEC import os # Generate Random Private Key key = os.urandom(32).hex() # Convert Private Key To zCash Address zCash_Address = PrivateKey_To_ZEC(key) Generated zCash Address From Mnemonic from Blockthon.Wallet import getMnemonic from Blockthon.zCash import Mnemonic_To_ZEC # Generated Random Mnemonic with 12 word mnemonicWords = getMnemonic(12) # Convert To zCash Address zCash_Address = Mnemonic_To_ZEC(mnemonicWords) Check Value Balance on zCash Address : from Blockthon.zCash import Balance_ZEC zCash_Address = 'ADDRESS_zCash_WALLET' # checking return value on string Balance = Balance_ZEC(zCash_Address)","title":"zCash With Blockthon"},{"location":"zCash_Wallet/#zcash-with-blockthon","text":"","title":"zCash With Blockthon"},{"location":"zCash_Wallet/#generated-and-convert-private-key-hex-to-zcash-address","text":"from Blockthon.zCash import PrivateKey_To_ZEC import os # Generate Random Private Key key = os.urandom(32).hex() # Convert Private Key To zCash Address zCash_Address = PrivateKey_To_ZEC(key)","title":"Generated and Convert Private Key (HEX) To zCash Address"},{"location":"zCash_Wallet/#generated-zcash-address-from-mnemonic","text":"from Blockthon.Wallet import getMnemonic from Blockthon.zCash import Mnemonic_To_ZEC # Generated Random Mnemonic with 12 word mnemonicWords = getMnemonic(12) # Convert To zCash Address zCash_Address = Mnemonic_To_ZEC(mnemonicWords)","title":"Generated zCash Address From Mnemonic"},{"location":"zCash_Wallet/#check-value-balance-on-zcash-address","text":"from Blockthon.zCash import Balance_ZEC zCash_Address = 'ADDRESS_zCash_WALLET' # checking return value on string Balance = Balance_ZEC(zCash_Address)","title":"Check Value Balance on zCash Address :"}]}